# /etc/nginx/conf.d/default.conf
# upstream group we want to handle traffic
upstream loadbalanced {
    # location name of the servers
    # no load balancing method is specified for Round Robin
    # server servera down; # mark server as down to remove it.
    server servera;
    server serverb;
}
server {  
  listen 80;
  # listen 443 ssl; // TODO add ssl config for production
  # server_name using the docker container name
  server_name loadbalancer;
  # docker logs
  access_log  /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log;
  # volume logs
  access_log  /var/log/nginx/loadbalancer_access.log;
  error_log  /var/log/nginx/loadbalancer_error.log;

  location / {
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
    # proxy_pass using the upstream group name
    proxy_pass http://loadbalanced;
    proxy_ssl_session_reuse off;
    proxy_cache_bypass $http_upgrade;
  }
  # note the trailing slash on the location and proxy_pass
  # this will rewrite the url parameters 
  # so it doesn't pass /servera with the request
  # http://localhost/servera/1 > /1
  location /servera/ { 
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
     # proxy_pass using the docker container name
    proxy_pass http://servera/;
    proxy_ssl_session_reuse off;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect off;
  }
  # check the access.log for serverb
  # it will pass /serverb/ with the request
  # http://localhost/serverb/1 > /serverb/1
  location /serverb { 
    proxy_set_header Host $http_host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-NginX-Proxy true;
     # proxy_pass using the docker container name
    proxy_pass http://serverb;
    proxy_ssl_session_reuse off;
    proxy_cache_bypass $http_upgrade;
    proxy_redirect off;
  }
}
